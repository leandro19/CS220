CS-220 Spring 2017 Lab 10 answers		Due: April 25, 2017

1. Cut and paste a copy of your successful test.txt file that creates a texthex.txt 
   file that invokes the target function:

C 12345689012345678901234567890123456789012345678901234567890123456789012345678904656865465656776476777618
X 500640
   
2. Notice that the target function in target.c ends with an "exit(0)" invocation.  The
   "exit(0)" causes the target function to return directly to the operating system cleanup
   routine instead of to the function that called "target".  If the target function had 
   ended with "return false" instead of "exit(0)", would target still run sucessfully?
   If not, what might happen and why?

	A return statement would put a ret instruction in the x86 assembly code. It would then pop the address off of the stack and jump to that address. The buffer overflow may cause this address to no longer be accessible and cause a segmentation fault.

   
3. If target.c had used fgets instead of gets, would your buffer overflow attack have been succesful?
   Why or why not?

   The attack would not have been succesful because fgets only allows enough input to fill up the buffer.
   
4. Did the Makefile make this lab easier or harder to run?  Is it worth the time to build a correct
   Makefile so that dependencies are automatically taken care of?

   The Makefile made this lab much easier to run because dependencies were built on their own. Yes, it is worth the time to build a proper Makefile.
   
5. Now that you know how to do a buffer overflow attack, could you do a buffer overflow
   attack on target WITHOUT looking at target.c?  If not, why not?  If so, what tools
   would you use to figure out what is in the "target" executable file?

   Yes. I would use gdb and find the length of the string in the x86 assembly instead of finding it by looking at the code.
